
// Renderer

namespace openll {
    typedef Handle RendererHandle;

    partial interface Limits {
        const Symbol MAX_RENDERER_INSTANCES;
    }

    partial interface RendererAttribute {
        const Symbol RENDERER_ENGINE_TYPE;
        const Symbol RENDERER_FONT_COLORS;
    }
    
    [Constructor(RenderingEngineType type)]
    interface Renderer {
        void renderLabel(Surface surface, Label label);
        
        boolean getAttribBoolean(RendererHandle handle, RendererAttribute symbol);
        short getAttribInteger(RendererHandle handle, RendererAttribute symbol);
        // Repeat per type
    }
    
    void renderLabel(RendererHandle renderer, SurfaceHandle surface, LabelHandle label);
    
    RendererHandle createRenderer(RenderingEngineType type);
    void destroyRenderer(RendererHandle handle);
    
    boolean getRendererAttribBoolean(RendererHandle handle, RendererAttribute symbol);
    short getRendererAttribInteger(RendererHandle handle, RendererAttribute symbol);
    // Repeat per type
}
