
// Text

namespace openll {
    typedef Handle TextHandle;
    
    partial interface Limits {
        const Symbol NUM_TEXT_FORMATS;
        const Symbol NUM_TEXT_INTERNAL_FORMATS;
        const Symbol MAX_TEXT_INSTANCES;
    }

    partial interface TextInformation {
        const Symbol TEXT_FORMATS;
        const Symbol TEXT_INTERNAL_FORMATS;
    }

    partial interface TextAttribute {
        const Symbol TEXT_LENGTH;
        const Symbol TEXT_ENCODING;
    }

    partial interface TextInternalFormat {
        const Symbol TEXT_INTERNAL_FORMAT_ANSI;
        const Symbol TEXT_INTERNAL_FORMAT_ASCII;
    }

    partial interface TextFormat {
        const Symbol TEXT_FORMAT_ANSI;
        const Symbol TEXT_FORMAT_ASCII;
    }
    
    [Constructor]
    interface Text {
        void loadContents(TextInternalFormat internalFormat, TextFormat contentEncoding, ByteString contents);
        
        unsigned long getAttribUnsignedLong(TextAttribute symbol);
        Symbol getAttribEnum(TextAttribute symbol);
        // Repeat per type
    }
    
    TextHandle createText();
    void destroyText(TextHandle handle);
    
    void loadTextContents(TextHandle handle, TextInternalFormat internalFormat, TextFormat contentEncoding, ByteString contents);
    
    unsigned long getTextAttribUnsignedLong(TextHandle handle, TextAttribute symbol);
    Symbol getTextAttribEnum(TextHandle handle, TextAttribute symbol);
    // Repeat per type
}
